package com.ecommerce.fruitstore.service;

import com.ecommerce.fruitstore.NumberFormatter;
import com.ecommerce.fruitstore.domain.CustomerOrder;
import com.ecommerce.fruitstore.domain.OrderItem;
import com.ecommerce.fruitstore.domain.OrderRequest;
import com.ecommerce.fruitstore.domain.OrderSummary;
import com.ecommerce.fruitstore.repository.OrderRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class OrderServiceTest {

    @Mock
    OrderRepository orderRepository;

    @Mock
    PricingService pricingService;

    @BeforeEach
    void setUp() {
        // No setup required for this example
    }

    @Test
    public void testCreateOrderWithApplesAndOranges() {
        // No test required for this example

        CustomerOrder customerOrder = new CustomerOrder();
        customerOrder.getOrderItems().add(createOrderItem("Apple", 3, 0.6));
        customerOrder.getOrderItems().add(createOrderItem("Orange", 2, 0.25));
        customerOrder.setId(1L); // In real use autigenerated by JPA

        OrderService orderService = new OrderServiceImpl(orderRepository, pricingService);

       when(orderRepository.saveOrder(any(CustomerOrder.class))).thenReturn(customerOrder);

        OrderSummary summary = orderService.createdOrder(new OrderRequest(3, 2));
        assertNotNull(summary);
        assertNotNull(summary.getOrderId());
        assertEquals(1L, summary.getOrderId());
        assertTrue(summary.getTotalPrice().equals(NumberFormatter.formatDecimal(2.3)));

        verify(orderRepository, times(1)).saveOrder(any(CustomerOrder.class));
        assertEquals(3, summary.getApples());
        assertEquals(2, summary.getOranges());
    }

    @Test
    public void testCreateOrderWithApplesOnly() {
        // No test required for this example

        CustomerOrder customerOrder = new CustomerOrder();
        customerOrder.getOrderItems().add(createOrderItem("Apple", 3, 0.6));

        OrderService orderService = new OrderServiceImpl(orderRepository, pricingService);

        when(orderRepository.saveOrder(any(CustomerOrder.class))).thenReturn(customerOrder);

        OrderSummary summary = orderService.createdOrder(new OrderRequest(3, 0));
        assertNotNull(summary);
        assertTrue(summary.getTotalPrice().equals(NumberFormatter.formatDecimal(1.8)));

        verify(orderRepository, times(1)).saveOrder(any(CustomerOrder.class));
        assertEquals(3, summary.getApples());
        assertEquals(0, summary.getOranges());
    }


    @Test
    public void testCreateOrderWithOrangesOnly() {
        // No test required for this example

        CustomerOrder customerOrder = new CustomerOrder();
        customerOrder.getOrderItems().add(createOrderItem("Orange", 2, 0.25));

        OrderService orderService = new OrderServiceImpl(orderRepository, pricingService);

        when(orderRepository.saveOrder(any(CustomerOrder.class))).thenReturn(customerOrder);

        OrderSummary summary = orderService.createdOrder(new OrderRequest(0, 2));
        assertNotNull(summary);
        //assertEquals(3L, summary.getOrderId());
        assertTrue(summary.getTotalPrice().equals(NumberFormatter.formatDecimal(0.5)));

        verify(orderRepository, times(1)).saveOrder(any(CustomerOrder.class));
        assertEquals(0, summary.getApples());
        assertEquals(2, summary.getOranges());
    }

    @Test
    public void testCreateWithNoItems() {
        // No test required for this example

        CustomerOrder customerOrder = new CustomerOrder();
        //customerOrder.setId(4L); // Will be set by JPA in real use

        OrderService orderService = new OrderServiceImpl(orderRepository, pricingService);

        when(orderRepository.saveOrder(any(CustomerOrder.class))).thenReturn(customerOrder);

        OrderSummary summary = orderService.createdOrder(new OrderRequest(0, 0));
        assertNotNull(summary);

        verify(orderRepository, times(1)).saveOrder(any(CustomerOrder.class));
        assertEquals(0, summary.getApples());
        assertEquals(0, summary.getOranges());
    }

    private OrderItem createOrderItem(String itemName, int quantity, double unitPrice) {
        OrderItem orderItem = new OrderItem();
        orderItem.setItemName(itemName);
        orderItem.setQuantity(quantity);
        orderItem.setUnitPrice(unitPrice);
        orderItem.setTotalPrice(NumberFormatter.formatDecimal(quantity * unitPrice));
        return orderItem;
    }
}
